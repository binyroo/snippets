# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}

# var Function
snippet varf
	var ${1:fname} = function(${2:argument}) {
		${3}
	};
# Anonymous Function
snippet f
	function(${1}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# foreach
snippet foreach
	forEach(function(${1:v}, ${2:i}, ${3:array}) {
		${5}
	}${4:/* , context */});
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}


# iron Class
snippet iron
	iron.Class({
		initialize: function() {
			${1:// code}
		}${2:}
	});

# iron Class (Extend)
snippet irone
	iron.Class(${1:SuperClass}, {
		initialize: function() {
			$1.apply(this${2:, arguments});
		}${3}
	});

# iron Class (Mix)
snippet ironm
	iron.Class({
		'mix': [${1:mixed_components}]
	}, {
		initialize: function() {
			${2:// code}
		}${3}
	});

# iron Class (Extend and Mix)
snippet ironem
	iron.Class({
		'inherit': ${1:SuperClass},
		'mix': [${2:mixed_components}]
	}, {
		initialize: function() {
			$1.apply(this${3:, arguments});
		}${4}
	});

# iron Class of map service
snippet msiron
	nhn.map.service.${1:BinyrooClass} = iron.Class({
		initialize: function() {
			${2:// code}
		}${3}
	});

# iron Class of map service (Extend)
snippet msirone
	nhn.map.service.${1:BinyrooClass} = iron.Class(${2:SuperClass}, {
		initialize: function() {
			$2.apply(this${3:, arguments});
		}${4}
	});

# iron Class of map service (Mix)
snippet msironm
	nhn.map.service.${1:BinyrooClass} = iron.Class({
		'mix': [${2:mixed_components}]
	}, {
		initialize: function() {
			${3:// code}
		}${4}
	});

# iron Class of map service (Extend and Mix)
snippet msironem
	nhn.map.service.${1:BinyrooClass} = iron.Class({
		'inherit': ${2:SuperClass},
		'mix': [${3:mixed_components}]
	}, {
		initialize: function() {
			$2.apply(this${4:, arguments});
		}${5}
	});


# qunit
snippet q
	jQuery(function() {
		
		module('${1:BinyrooClass}'${2:/* setup and teardown */});

		test('${3}', function() {
			${4}
		});
	});

# qunit test
snippet qt
	test('${1:test description}', function() {
		
		${2:ok(true);}
	});
